// Code generated by tmpl; DO NOT EDIT.
// https://github.com/benbjohnson/tmpl
//
// Source: pooled_meters.go.tmpl

package flow_metrics

import (
	"github.com/deepflowio/deepflow/server/libs/pool"
)

var poolFlowMeter = pool.NewLockFreePool(func() interface{} {
	return new(FlowMeter)
})

func AcquireFlowMeter() *FlowMeter {
	return poolFlowMeter.Get().(*FlowMeter)
}

func ReleaseFlowMeter(meter *FlowMeter) {
	if meter == nil {
		return
	}
	*meter = FlowMeter{}
	poolFlowMeter.Put(meter)
}

func CloneFlowMeter(meter *FlowMeter) *FlowMeter {
	newMeter := AcquireFlowMeter()
	*newMeter = *meter
	return newMeter
}

func (m *FlowMeter) Clone() Meter {
	return CloneFlowMeter(m)
}

func (m *FlowMeter) Release() {
	ReleaseFlowMeter(m)
}

func (m *FlowMeter) ToReversed() Meter {
	newMeter := m.Clone()
	newMeter.Reverse()
	return newMeter
}

var poolUsageMeter = pool.NewLockFreePool(func() interface{} {
	return new(UsageMeter)
})

func AcquireUsageMeter() *UsageMeter {
	return poolUsageMeter.Get().(*UsageMeter)
}

func ReleaseUsageMeter(meter *UsageMeter) {
	if meter == nil {
		return
	}
	*meter = UsageMeter{}
	poolUsageMeter.Put(meter)
}

func CloneUsageMeter(meter *UsageMeter) *UsageMeter {
	newMeter := AcquireUsageMeter()
	*newMeter = *meter
	return newMeter
}

func (m *UsageMeter) Clone() Meter {
	return CloneUsageMeter(m)
}

func (m *UsageMeter) Release() {
	ReleaseUsageMeter(m)
}

func (m *UsageMeter) ToReversed() Meter {
	newMeter := m.Clone()
	newMeter.Reverse()
	return newMeter
}

var poolAppMeter = pool.NewLockFreePool(func() interface{} {
	return new(AppMeter)
})

func AcquireAppMeter() *AppMeter {
	return poolAppMeter.Get().(*AppMeter)
}

func ReleaseAppMeter(meter *AppMeter) {
	if meter == nil {
		return
	}
	*meter = AppMeter{}
	poolAppMeter.Put(meter)
}

func CloneAppMeter(meter *AppMeter) *AppMeter {
	newMeter := AcquireAppMeter()
	*newMeter = *meter
	return newMeter
}

func (m *AppMeter) Clone() Meter {
	return CloneAppMeter(m)
}

func (m *AppMeter) Release() {
	ReleaseAppMeter(m)
}

func (m *AppMeter) ToReversed() Meter {
	newMeter := m.Clone()
	newMeter.Reverse()
	return newMeter
}
